<?xml version="1.0"?>
<GraphicalMotorPrimitive xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <entries />
  <name>TestReferee</name>
  <gain>1</gain>
  <gainMin>-1</gainMin>
  <gainMax>60</gainMax>
  <GraphicalBlock>
    <StmPreambleBlock>
      <entries />
      <name>StmPreambleBlock</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <preamble>playing = False

class TestReferee:
    @staticmethod
    def checkGameState(connection):
        global playing
        info = connection.SchedulerGetOutputValues_response("GameStatusTracker",["Playing"])
        # There should always be one value in info[0] debug is needed if not
        if info and len(info) &gt;= 1 and len(info[0]) == 1:
            playing = info[0][0] == 1
        else:
            print("Failed to get message " + str(info))</preamble>
    </StmPreambleBlock>
    <Position>
      <X>32</X>
      <Y>5</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries />
      <name>Initial</name>
      <gain>2</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>TestReferee.checkGameState(self.connection)</loop>
      <enter>self.connection.SchedulerStartMove("GameStatusTracker",0,20)</enter>
      <exit />
    </StmStateBlock>
    <Position>
      <X>468</X>
      <Y>46</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Initial</name>
          <output_idx>0</output_idx>
          <condition>not playing</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>Playing</name>
          <output_idx>0</output_idx>
          <condition>not playing</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>Waiting</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>TestReferee.checkGameState(self.connection)</loop>
      <enter />
      <exit />
    </StmStateBlock>
    <Position>
      <X>1007</X>
      <Y>5</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Initial</name>
          <output_idx>0</output_idx>
          <condition>playing</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>Waiting</name>
          <output_idx>0</output_idx>
          <condition>playing</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>Playing</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>TestReferee.checkGameState(self.connection)</loop>
      <enter>self.connection.SchedulerStartMove("MarcheBasse",0,1000)</enter>
      <exit>self.connection.SchedulerStopMove("MarcheBasse",1000)</exit>
    </StmStateBlock>
    <Position>
      <X>1007</X>
      <Y>283</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlockLink>
    <Condition>not playing</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Initial</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Condition>playing</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Initial</SourceName>
    <TargetName>Playing</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Condition>not playing</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>1</TargetIndex>
    <SourceName>Playing</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Condition>playing</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>1</TargetIndex>
    <SourceName>Waiting</SourceName>
    <TargetName>Playing</TargetName>
  </GraphicalBlockLink>
  <hsize>500</hsize>
  <vsize>500</vsize>
  <SchemaComments />
  <Frequency>100</Frequency>
  <SmoothStart>1000</SmoothStart>
  <SmoothStop>1000</SmoothStop>
  <Duration>0</Duration>
</GraphicalMotorPrimitive>