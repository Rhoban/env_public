<?xml version="1.0"?>
<GraphicalMotorPrimitive xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <entries />
  <name>RobocupStm</name>
  <gain>1</gain>
  <gainMin>-1</gainMin>
  <gainMax>60</gainMax>
  <GraphicalBlock>
    <StmPreambleBlock>
      <entries />
      <name>StmPreambleBlock</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <preamble># Some flags used in states
fallback = False
fallface = False
releve = False
retourne = False
playing = False

#Some methods
class RobocupStm:
 @staticmethod
 def check_fall(stm):
  global fallback
  global fallface
  info = stm.GetMoveValues("FallDetector",["fallback","fallface"])
  if info and len(info) &gt;= 1 and len(info[0]) &gt;= 2:
   fallback = float(info[0][0]) &gt; 0.1
   fallface = float(info[0][1]) &gt; 0.1
  else:
   print("Failed to get message " + str(info))

 def check_releve(self):
  global releve
  info = self.SchedulerGetOutputValues_response("Relevage",["Finished"])
  if info and len(info) &gt;= 1 and len(info[0])&gt;=1:
   releve = info[0][0] &gt; 0.1

 def checkGameState(self):
  global playing
  info = self.SchedulerGetOutputValues_response("GameStatusTracker",["Playing"])
  # There should always be one value in info[0] debug is needed if not
  if info and len(info) &gt;= 1 and len(info[0]) == 1:
   playing = info[0][0] == 1
  else:
   print("Failed to get message " + str(info))</preamble>
    </StmPreambleBlock>
    <Position>
      <X>-319.441597364592</X>
      <Y>-379.23936776954929</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Waiting</name>
          <output_idx>0</output_idx>
          <condition>playing and not fallback and not fallface</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>WalkToBall</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>RobocupStm.check_fall(self)
RobocupStm.checkGameState(self)</loop>
      <enter>self..SchedulerStartMove("MarcheBasse",0,500)
self..SchedulerStartMove("TrackBallAndGoal",0,100)
self..SchedulerStartMove("PositionBasse",0,500)</enter>
      <exit>self..SchedulerStopMove("MarcheBasse",200)
self..SchedulerStopMove("TrackBallAndGoal",200)
self..SchedulerStopMove("PositionBasse",200)</exit>
    </StmStateBlock>
    <Position>
      <X>309.58267834829559</X>
      <Y>899.01766256622818</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Waiting</name>
          <output_idx>0</output_idx>
          <condition>fallback</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>FallBack</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>RobocupStm.check_fall(self)
global retourne
retourne = False
info = self..SchedulerGetOutputValues_response("Retournement",["Finished"])
if info and len(info) &gt;= 1 and len(info[0])&gt;=1:
    if info[0][0] &gt;= 0.9:
        if fallback:
            retourne = False
            self..SchedulerStartMove("Retournement",0,200)
        else:
            retourne = True
</loop>
      <enter>global retourne
self..SchedulerStartMove("Retournement",0,200)
retourne = False</enter>
      <exit>self..SchedulerStopMove("Retournement",200)</exit>
    </StmStateBlock>
    <Position>
      <X>1103.0938418051217</X>
      <Y>59.160000000000082</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Waiting</name>
          <output_idx>0</output_idx>
          <condition>fallface</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>FallFace</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>RobocupStm.check_releve(self.)</loop>
      <enter>releve = False
self..SchedulerStartMove("Relevage",0,200)</enter>
      <exit>self..SchedulerStopMove("Relevage",500)</exit>
    </StmStateBlock>
    <Position>
      <X>1026.4515217682972</X>
      <Y>820.546760027102</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries />
      <name>Initial</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop />
      <enter>self.SchedulerStartMove("FallDetector",0,20)
self.SchedulerStartMove("GameStatusTracker",0,20)
self.SchedulerStartMove("LocateBall",0,20)
self.SchedulerStartMove("LocateGoal",0,20)
self.SchedulerStartMove("MotionParameters",0,20)
self.SchedulerStartMove("PositionBasse",0,20)
self.SchedulerStartMove("PushBallToGoal",0,20)
self.SchedulerStartMove("PushBallToGoalCorrection",0,20)
self.SchedulerStartMove("TrackBallAndGoal",0,20)
self.SchedulerStartMove("TrackObject",0,20)
self.SchedulerStartMove("VisionParameters",0,20)
</enter>
      <exit />
    </StmStateBlock>
    <Position>
      <X>122.80448482331491</X>
      <Y>123</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Initial</name>
          <output_idx>0</output_idx>
          <condition>True</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>FallBack</name>
          <output_idx>0</output_idx>
          <condition>retourne</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>FallFace</name>
          <output_idx>0</output_idx>
          <condition>releve</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>WalkToBall</name>
          <output_idx>0</output_idx>
          <condition>not playing or fallback or fallface</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>Waiting</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>val = self.GetMoveValues("PositionBasse",["test"])
print("Value of block test " + str(val[0][0]))
#RobocupStm.check_fall(self)
#RobocupStm.checkGameState(self)
 </loop>
      <enter />
      <exit />
    </StmStateBlock>
    <Position>
      <X>700.82102411196308</X>
      <Y>450.74763500043593</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>True</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Initial</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>playing and not fallback and not fallface</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Waiting</SourceName>
    <TargetName>WalkToBall</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>fallback</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Waiting</SourceName>
    <TargetName>FallBack</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>fallface</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Waiting</SourceName>
    <TargetName>FallFace</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>retourne</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>1</TargetIndex>
    <SourceName>FallBack</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>releve</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>2</TargetIndex>
    <SourceName>FallFace</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>not playing or fallback or fallface</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>3</TargetIndex>
    <SourceName>WalkToBall</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <hsize>500</hsize>
  <vsize>500</vsize>
  <SchemaComments />
  <Frequency>100</Frequency>
  <SmoothStart>0</SmoothStart>
  <SmoothStop>0</SmoothStop>
  <Duration>0</Duration>
</GraphicalMotorPrimitive>