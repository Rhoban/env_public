<?xml version="1.0"?>
<GraphicalMotorPrimitive xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <entries />
  <name>RobocupStm</name>
  <gain>1</gain>
  <gainMin>-1</gainMin>
  <gainMax>60</gainMax>
  <GraphicalBlock>
    <StmPreambleBlock>
      <entries />
      <name>StmPreambleBlock</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <preamble># Some flags used in states
fallback = False
fallface = False
releve = False
playing = False

#Some methods
class RobocupStm:
 @staticmethod
 def check_fall(stm):
  global fallback
  global fallface
  info = stm.GetMoveValues("FallDetector",["fallback","fallface"])
  if info and len(info) &gt;= 1 and len(info[0]) &gt;= 2:
   fallback = float(info[0][0]) &gt; 0.1
   fallface = float(info[0][1]) &gt; 0.1
  else:
   print("Failed to get message " + str(info))

 @staticmethod
 def check_releve(stm, moveName):
  global releve
  info = stm.SchedulerGetOutputValues_response(moveName,["over"])
  if info and len(info) &gt;= 1 and len(info[0])&gt;=1:
   releve = (float(info[0][0]) &gt; 0.1)

 @staticmethod
 def checkGameState(stm):
  global playing
  info = stm.SchedulerGetOutputValues_response("GameStatusTracker",["Playing"])
  # There should always be one value in info[0] debug is needed if not
  if info and len(info) &gt;= 1 and len(info[0]) == 1:
   playing = info[0][0] == 1
  else:
   print("Failed to get message " + str(info))</preamble>
    </StmPreambleBlock>
    <Position>
      <X>-162.87844259109312</X>
      <Y>156.28576737842377</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Waiting</name>
          <output_idx>0</output_idx>
          <condition>playing and not fallback and not fallface</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>WalkToBall</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>RobocupStm.check_fall(self)
RobocupStm.checkGameState(self)</loop>
      <enter>self.SchedulerStartMove("CartWalk",0,500)</enter>
      <exit>self.SchedulerStopMove("CartWalk",200)</exit>
    </StmStateBlock>
    <Position>
      <X>329.52544852549039</X>
      <Y>782.64412162814051</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Waiting</name>
          <output_idx>0</output_idx>
          <condition>fallback</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>FallBack</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>RobocupStm.check_releve(self,"StandUpBack")</loop>
      <enter>releve = False
self.SchedulerStartMove("StandUpBack",0,200)</enter>
      <exit>self.SchedulerStopMove("StandUpFront",500)</exit>
    </StmStateBlock>
    <Position>
      <X>1088.2794503272548</X>
      <Y>603.16576737842377</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Waiting</name>
          <output_idx>0</output_idx>
          <condition>fallface</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>FallFace</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>RobocupStm.check_releve(self,"StandUpFront")</loop>
      <enter>releve = False
print("Entering FallFace!!!!")
self.SchedulerStartMove("StandUpFront",0,200)</enter>
      <exit>self.SchedulerStopMove("StandUpFront",500)</exit>
    </StmStateBlock>
    <Position>
      <X>792.524808255211</X>
      <Y>805.35263837017567</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries />
      <name>Initial</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop />
      <enter>self.SchedulerStartMove("FallDetector",0,20)
self.SchedulerStartMove("GameStatusTracker",0,20)</enter>
      <exit />
    </StmStateBlock>
    <Position>
      <X>414.80989074224027</X>
      <Y>281.774054439194</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlock>
    <StmStateBlock>
      <entries>
        <BlockPredecessor>
          <name>Initial</name>
          <output_idx>0</output_idx>
          <condition>True</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>FallBack</name>
          <output_idx>0</output_idx>
          <condition>print("Releve in transiiton" + str(releve)) and releve</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>FallFace</name>
          <output_idx>0</output_idx>
          <condition>releve</condition>
          <fire />
        </BlockPredecessor>
        <BlockPredecessor>
          <name>WalkToBall</name>
          <output_idx>0</output_idx>
          <condition>not playing or fallback or fallface</condition>
          <fire />
        </BlockPredecessor>
      </entries>
      <name>Waiting</name>
      <gain>1</gain>
      <gainMin>-1</gainMin>
      <gainMax>60</gainMax>
      <loop>RobocupStm.checkGameState(self)</loop>
      <enter />
      <exit />
    </StmStateBlock>
    <Position>
      <X>647.71352399321177</X>
      <Y>510.52412162814051</Y>
    </Position>
  </GraphicalBlock>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>True</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Initial</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>playing and not fallback and not fallface</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Waiting</SourceName>
    <TargetName>WalkToBall</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>fallback</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Waiting</SourceName>
    <TargetName>FallBack</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>fallface</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>0</TargetIndex>
    <SourceName>Waiting</SourceName>
    <TargetName>FallFace</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>releve</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>1</TargetIndex>
    <SourceName>FallBack</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>print("Releve in transiiton" + str(releve)) and releve</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>2</TargetIndex>
    <SourceName>FallFace</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <GraphicalBlockLink>
    <Avg>0</Avg>
    <Max>0</Max>
    <Min>0</Min>
    <Condition>not playing or fallback or fallface</Condition>
    <Fire />
    <SourceIndex>0</SourceIndex>
    <TargetIndex>3</TargetIndex>
    <SourceName>WalkToBall</SourceName>
    <TargetName>Waiting</TargetName>
  </GraphicalBlockLink>
  <hsize>500</hsize>
  <vsize>500</vsize>
  <SchemaComments />
  <Frequency>100</Frequency>
  <SmoothStart>0</SmoothStart>
  <SmoothStop>0</SmoothStop>
  <Duration>0</Duration>
</GraphicalMotorPrimitive>